#!/usr/bin/env python3

import csv
import sys
from os.path import splitext
from datetime import datetime
import mt940_writer as mt940

# Usage: dkb2mt940 infile

# This adds the narrative as :86: description field
class Transaction(mt940.Transaction):
   def __str__(self):
        return '{value_date}{entry_date}{category}{amount}{type_code}\n:86:{narrative}'.format(
            value_date=self.date.strftime('%y%m%d'),
            entry_date=self.date.strftime('%m%d'),
            category='C' if self.amount >= 0 else 'D',
            amount='{:0.2f}'.format(self.amount).replace('.', ',').replace('-', ''),
            type_code=self.transaction_type.value,
            narrative=self.narrative
        )

input_path = sys.argv[1]
output_path = splitext(input_path)[0] + '.txt'

def parse_row(row):
   date = datetime.strptime(row[0], '%d.%m.%y')
   if row[6] == 'Eingang':
      payee = row[3]
   else:
      payee = row[4]
   memo = row[5]
   amount = float(row[8].replace('.', '').replace(',', '.'))

   narrative = '{}, {}'.format(payee, memo)

   return Transaction(date, amount, mt940.TransactionType.transfer, narrative)

with open(input_path, 'r', encoding='utf-8-sig') as infile:
   currency = 'EUR'
   csv_reader = csv.reader(infile, delimiter=',', quotechar='"')

   row = next(csv_reader)
   account = mt940.Account(row[1], '')

   next(csv_reader)
   row = next(csv_reader)

   closing_date = datetime.strptime(row[0].split(' ')[-1][:-1], '%d.%m.%Y')
   balance = float(row[1].split("\xa0")[0].replace('.', '').replace(',', '.'))
   closing_balance = mt940.Balance(balance, closing_date, currency)

   next(csv_reader)
   next(csv_reader)

   transactions = []
   for row in csv_reader:
      if len(row) == 12:
         transaction = parse_row(row)
         balance -= transaction.amount
         if transaction.amount != 0:
            transactions.append(transaction)

   opening_balance = mt940.Balance(balance, transactions[-1].date, currency)

   statement = mt940.Statement('0', account, '0', opening_balance, closing_balance, transactions)

   with open(output_path, mode='w') as outfile:
      outfile.write(str(statement))

